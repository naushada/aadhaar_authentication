
#/* 
# @name ui20.tk
# @brief This file is to build the user form entry
#        through which respective values can be supplied by end user
#        This UI FORM complies with specification version 2.0
#
# @author Mohad Naushad Ahmed
# @email  NAUSHAD.DLN@GMAIL.COM
# @dated  01-Jul-2018
#*/

namespace eval authV20 {
  set widgets_name(auth) "" 
  set widgets_name(uses) "" 
  set widgets_name(tkn) "" 
  set widgets_name(meta) "" 
  set widgets_name(pi) "" 
  set widgets_name(pa) "" 
  set widgets_name(pfa) "" 
  set widgets_name(bio) "" 
  set widgets_name(pv) "" 
  set widgets_name(demo) "" 
  set widgets_name(uidai) "" 
  set widgets_name(crypto) "" 


  proc auth_attr {frm} {

    set arg { {uid uide entry {}} {tid tide entry {}} {txn txne entry {}} 
              {ac  ace  entry {}} {sa  sae  entry {}} {ver vere entry {}} 
              {rc  rce  entry {}} {lk  lke  entry {}} }

    build_form $frm auth $arg authV20
  };#/*auth_attr*/

  proc uses_attr {frm} {

    set arg { {pi  pic  checkbutton {pic}}  {pa pac checkbutton {pac}} {pfa  pfac  checkbutton {pfac}}
              {bio bioc checkbutton {bioc}} {pv pvc checkbutton {pvc}} {demo democ checkbutton {democ}} }

    build_form $frm uses $arg authV20
  };#/*uses_attr*/

  proc meta_attr {frm} {

    set arg { {udc  udce  entry {}} {rdsId rdsIde entry {}} {rdsVer rdsVere entry {}} 
              {dpId dpIde entry {}} {dc    dce    entry {}} {mi     mie     entry {}} 
              {mc   mce   entry {}}}

    build_form $frm meta $arg authV20
  };#/*meta_attr*/

  proc pi_attr {frm} {

    set arg { {ms    mse    combobox {E P}} {mv  mve  combobox {100 80 60 40 20 10}} {name namee entry {}} 
              {lname lnamee entry {}} {lmv lmve entry {}} {gender gendere combobox {M F T}} 
              {dob dobe entry {}} {dobt dobte combobox {V D A}} {age agee entry {}} {phone phonee entry {}} 
              {email emaile entry {}}}

    build_form $frm pi $arg authV20
  };#/*pi_attr*/

  proc pa_attr {frm} {

    set arg { {ms mse combobox {E P}} {co coe entry {}} {house housee entry {}} 
              {street streete entry {}} {lm lme entry {}} {loc loce entry {}} 
              {vtc vtce entry {}} {subdist subdiste entry {}} {dist diste entry {}} {state statee entry {}} 
              {pc pce entry {}} {po poe entry {}} }

    build_form $frm pa $arg authV20
  };#/*pa_attr*/

  proc pfa_attr {frm} {

    set arg { {ms mse combobox {E P}} {mv mve entry {}} {av ave entry {}} 
              {lav lave entry {}} {lmv lmve entry {}} }

    build_form $frm pfa $arg authV20
  };#/*pfa_attr*/

  proc bio_attr {frm} {

    set arg { {type typee combobox {FMR FIR IIR}} 
              {bs bse entry {}} {posh poshe combobox {UNKNOWN LEFT_IRIS 
              RIGHT_IRIS LEFT_INDEX LEFT_LITTLE LEFT_MIDDLE LEFT_RING 
              LEFT_THUMB RIGHT_INDEX RIGHT_LITTLE RIGHT_MIDDLE RIGHT_RING RIGHT_THUMB}}}

    build_form $frm bio $arg authV20
  };#/*bio_attr*/

  proc pv_attr {frm} {

    set arg { {pin pine entry {}} {otp otpe entry {}} }

    build_form $frm pv $arg authV20
  };#/*pv_attr*/

  proc demo_attr {frm} {

    set arg { {lang lange combobox {NA
                                    Assamese
                                    Bengali
                                    Gujarati
                                    Hindi
                                    Kannada
                                    Malayalam
                                    Manipuri
                                    Marathi
                                    Oriya
                                    Punjabi
                                    Tamil
                                    Telugu
                                    Urdu}} }
 
    build_form $frm demo $arg authV20
  };#/*demo_attr*/

  proc crypto_attr {frm} {

    set lbl_frm [labelframe $frm.crypto_lbl_frame -text "Public/Privte Keys File"]
    grid $lbl_frm -sticky news -column 1 -row 3 -pady 2 -padx 1

    set arg { {public  publice entry {}} 
              {private privatee entry {}} \
              {password passworde entry {}}}

    build_form $lbl_frm crypto $arg authV20
  
    set btn_frm [frame $lbl_frm.btn_frm]

    button $btn_frm.btn_public -text "Select Public Key File" -command "authV20::browse_file public"
    button $btn_frm.btn_private -text "Select Private Key File" -command "authV20::browse_file private"
    grid $btn_frm.btn_public $btn_frm.btn_private -pady 2 -padx 2 -sticky news
    grid $btn_frm

  };#/*crypto_attr*/

  proc uidai_auth_server {frm} {

    set arg { {uri urie combobox {/auth /uidauth /auth2.5}} {host hoste entry {developer.uidai.gov.in}} }

    build_form $frm uidai $arg authV20
  };#/*uidai_auth_server*/

  proc demo_lang_get {p_name} {

    set lang_opt { {Assamese   01}
                   {Bengali    02}
                   {Gujarati   05}
                   {Hindi      06}
                   {Kannada    07}
                   {Malayalam  11}
                   {Manipuri   12}
                   {Marathi    13}
                   {Oriya      15}
                   {Punjabi    16}
                   {Tamil      20}
                   {Telugu     21}
                   {Urdu       22}
                 }

    set val [$p_name get] 
    puts "Value is $val"
  };#/*demo_lang_get*/

  proc uses_opt_disable {uses_opt} {
    variable widgets_name 

    if {$uses_opt == "pic"} {
      set demo_list [lindex $widgets_name(uses) 0]
    } elseif {$uses_opt == "pac"} {

      set demo_list [lindex $widgets_name(uses) 1]
    } elseif {$uses_opt == "pfac"} {

      set demo_list [lindex $widgets_name(uses) 2]
    } elseif {$uses_opt == "bioc"} {

      set demo_list [lindex $widgets_name(uses) 3]
    } elseif {$uses_opt == "pvc"} {

      set demo_list [lindex $widgets_name(uses) 4]
    } elseif {$uses_opt == "democ"} {

      set demo_list [lindex $widgets_name(uses) 5]
    } else {
      #;/*Invalid Option*/
    }

    $demo_list configure -state normal 
  };#/*uses_opt_disable*/

  proc uses_opt_enable {uses_opt} {
    variable widgets_name

    if {$uses_opt == "pic"} {
      set demo_list [lindex $widgets_name(uses) 0]
    } elseif {$uses_opt == "pac"} {

      set demo_list [lindex $widgets_name(uses) 1]
    } elseif {$uses_opt == "pfac"} {

      set demo_list [lindex $widgets_name(uses) 2]
    } elseif {$uses_opt == "bioc"} {

      set demo_list [lindex $widgets_name(uses) 3]
    } elseif {$uses_opt == "pvc"} {

      set demo_list [lindex $widgets_name(uses) 4]
    } elseif {$uses_opt == "democ"} {

      set demo_list [lindex $widgets_name(uses) 5]
    } else {
      #;/*Invalid Option*/
    }

    $demo_list configure -state normal
  };#/*uses_opt_enable*/

  proc uses_opt {chk_btn chk_selected} {

    if {$chk_selected == 1} {
      #/*Enable the Pi entry*/
      uses_opt_enable $chk_btn 

    } else {
      #/*Disable the Pi Entry*/
      uses_opt_disable $chk_btn
    }
  };#uses_opt*/

  proc set_default_auth {} {
    variable widgets_name 
    set default {"999938452218" "public" "TXN:BalaaghTesting" "public" \
                 "public" "1.6" "Y" "MBni88mRNM18dKdiVyDYCuddwXEQpl68dZAGBQ2nsOlGMzC9DkOVL5s"}
    set idx 0
    foreach val $widgets_name(auth) {
      $val delete 0 end
      $val insert 0 [lindex $default $idx]
      incr idx  
    } 
  };#/*set_default_auth*/

  proc set_default_uses {} {
    variable widgets_name

    [lindex $widgets_name(uses) 0] configure -state normal
    [lindex $widgets_name(uses) 5] configure -state normal
    [lindex $widgets_name(uses) 0] select
    [lindex $widgets_name(uses) 5] select
  };#/*set_default_uses*/

  proc set_default_meta {} {
    variable widgets_name 
    set default {"Balaagh" "" "" "" "" ""}
    set idx 0
    foreach val $widgets_name(meta) {
      if {"Entry" == [winfo class $val]} {
        $val delete 0 end
        $val insert 0 [lindex $default $idx]
      }
      incr idx
    }
  };#/*set_default_meta*/

  proc clear_auth {} {
    variable widgets_name 
 
    foreach val $widgets_name(auth) {
      $val delete 0 end
    } 
  };#/*clear_auth*/

  proc clear_uses {} {
    variable widgets_name 

    foreach val $widgets_name(uses) {
      $val configure -state normal
      $val deselect
    } 
  };#/*clear_uses*/

  proc clear_meta {} {
    variable widgets_name

    foreach val $widgets_name(meta) {
      if {"Entry" == [winfo class $val]} {
        $val delete 0 end
      }
    }
  };#/*clear_meta*/

  proc build_auth_request {req_type} {

    set arg {uid tid txn ac sa ver lk}
    set auth [get_value auth $arg authV20]
    set arg {pi pa pfa bio pv demo}
    set uses [get_value uses $arg authV20]
    set arg {udc fdc idc pip lot lov}
    set meta [get_value meta $arg authV20]

    #/*Prepare the request*/
    set REQ "stage=staging&request=$req_type&$auth&$uses&$tkn&$meta"

    set checkbutton_var {pic pac pfac bioc pvc democ}
    foreach val $checkbutton_var {
      global $val
      if {$val == "pic" && [subst $$val] == 1} {
        #/*Pi is selected*/
        set arg {ms mv name lname lmv gender dob dobt age phone email}
        set pi [get_value pi $arg authV20] 
        set REQ "$REQ&$pi"

      } elseif {$val == "pac" && [subst $$val] == 1} {
        #/*Pa is selected*/
        set arg {ms co house street lm loc vtc subdist dist state pc po}
        set pa [get_value pa $arg authV20] 
        set REQ "$REQ&$pa"
    
      } elseif {$val == "pfac" && [subst $$val] == 1} {
        #/*pfa is selected*/
        set arg {ms mv av lav lmv}
        set pfa [get_value pfa $arg authV20] 
        set REQ "$REQ&$pfa"

      } elseif {$val == "bioc" && [subst $$val] == 1} {
        #/*bio is selected*/
        set arg {type bs posh}
        set bio [get_value bio $arg authV20] 
        set REQ "$REQ&$bio"

      } elseif {$val == "pvc" && [subst $$val] == 1} {
        #/*Pv is selected*/
        set arg {pin otp}
        set pv [get_value pv $arg authV20] 
        set REQ "$REQ&$pv"

      } elseif {$val == "democ" && [subst $$val] == 1} {
        #/*demo is selected*/
        set arg {lang}
        set demo [get_value demo $arg authV20] 
        set REQ "$REQ&$demo"
      }
    }

    set arg {uri host}
    set uidai [get_value uidai $arg authV20] 
    set REQ "$REQ&$uidai"

    if {"ekyc" ne $req_type} {
      #/*Extracting the crypto contents*/
      set arg {public private password}
      set crypto [get_value crypto $arg authV20] 
      set REQ "$REQ&$crypto"
    }

    return "/request?$REQ"
  };#/*build_auth_request*/

  proc browse_file {type} {
    variable widgets_name

    set types {
          {{All Files}        *             }
          {{Text Files}       {.txt}        }
          {{TCL Scripts}      {.tcl}        }
          {{GIF Files}        {.gif}        }
          {{Text Files}       {}        TEXT}
        }

    set file_name [tk_getOpenFile -title "PKI Selection" -parent .child_win -filetypes $types]

    if {"public" == $type} {
      [lindex $widgets_name(crypto) 0] delete 0 end
      [lindex $widgets_name(crypto) 0] insert 0 $file_name

    } else {
      [lindex $widgets_name(crypto) 1] delete 0 end
      [lindex $widgets_name(crypto) 1] insert 0 $file_name
    }

  };#/*browser_file*/

};#/*namespace end*/
